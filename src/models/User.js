const BaseModel = require('./BaseModel');
const bcrypt = require('bcryptjs');
const { v4: uuidv4 } = require('uuid');

class User extends BaseModel {
  constructor() {
    super('users');
  }

  // Cr√©er un utilisateur avec hash du mot de passe
  async createUser(userData) {
    const hashedPassword = await bcrypt.hash(userData.password, 12);
    const verificationToken = uuidv4();

    const newUser = {
      ...userData,
      password_hash: hashedPassword,
      verification_token: verificationToken,
      is_verified: false,
      must_change_password: userData.must_change_password === true,
    };

    delete newUser.password;
    return await this.create(newUser);
  }

  // Changer le mot de passe et d√©sactiver le flag must_change_password
  async updatePassword(userId, newPassword) {
    const hashedPassword = await bcrypt.hash(newPassword, 12);
    const { data, error } = await this.supabase
      .from(this.tableName)
      .update({
        password_hash: hashedPassword,
        must_change_password: false,
      })
      .eq('id', userId)
      .select()
      .single();
    if (error) throw error;
    return data;
  }

  // Trouver par email
  async findByEmail(email) {
    const { data, error } = await this.supabase
      .from(this.tableName)
      .select(
        `
                *,
                roles(name),
                player_types(name)
            `
      )
      .eq('email', email)
      .single();

    if (error && error.code !== 'PGRST116') throw error;
    return data;
  }

  // V√©rifier mot de passe
  async verifyPassword(plainPassword, hashedPassword) {
    return await bcrypt.compare(plainPassword, hashedPassword);
  }

  // Obtenir tous les membres de l'√©quipe avec leurs r√¥les
  async getTeamMembers() {
    const { data, error } = await this.supabase
      .from(this.tableName)
      .select(
        `
                id, pseudo, email, discord_username, rank, is_verified,
                roles(id, name),
                player_types(id, name)
            `
      )
      .order('pseudo');

    if (error) throw error;
    return data;
  }

  // Obtenir les capitaines
  async getCaptains() {
    const { data, error } = await this.supabase
      .from(this.tableName)
      .select(
        `
                id, pseudo, email, discord_username,
                roles(name)
            `
      )
      .eq('roles.name', 'Capitaine');

    if (error) throw error;
    return data;
  }

  // V√©rifier le token de v√©rification
  async verifyEmail(token) {
    console.log('üîç User.verifyEmail appel√© avec token:', token);

    // D'abord v√©rifier si le token existe
    const { data: existingUser, error: findError } = await this.supabase
      .from(this.tableName)
      .select('id, email, pseudo, is_verified, verification_token')
      .eq('verification_token', token)
      .single();

    console.log('üîç R√©sultat de la recherche:', { existingUser, findError });

    if (findError && findError.code === 'PGRST116') {
      // Token non trouv√©
      console.log('‚ùå Token non trouv√© (PGRST116)');
      return null;
    }

    if (findError) {
      console.log('‚ùå Erreur lors de la recherche:', findError);
      throw findError;
    }

    if (!existingUser) {
      console.log('‚ùå Aucun utilisateur retourn√©');
      return null;
    }

    console.log(
      '‚úÖ Utilisateur trouv√©:',
      existingUser.email,
      'is_verified:',
      existingUser.is_verified
    );

    // Si l'utilisateur est d√©j√† v√©rifi√©
    if (existingUser.is_verified) {
      console.log('‚ÑπÔ∏è Utilisateur d√©j√† v√©rifi√©');
      return existingUser;
    }

    // Mettre √† jour le statut de v√©rification
    console.log('üîÑ Mise √† jour du statut de v√©rification...');
    const { data, error } = await this.supabase
      .from(this.tableName)
      .update({
        is_verified: true,
        verification_token: null,
      })
      .eq('id', existingUser.id)
      .select()
      .single();

    if (error) {
      console.log('‚ùå Erreur lors de la mise √† jour:', error);
      throw error;
    }

    console.log('‚úÖ Statut de v√©rification mis √† jour');
    return data;
  }

  // Obtenir les membres actifs de l'√©quipe (pour invitation automatique)
  async getActiveTeamMembers() {
    const { data, error } = await this.supabase
      .from(this.tableName)
      .select(
        `
        id,
        pseudo,
        email,
        roles(id, name),
        player_types(name)
      `
      )
      .eq('is_verified', true)
      .eq('role_id', 1) // Ne r√©cup√©rer que les joueurs pour les entrainements
      .not('roles', 'is', null); // Exclure les utilisateurs sans r√¥le

    if (error) throw error;
    return data || [];
  }

  // Obtenir les emails des utilisateurs par leurs IDs
  async getEmailsByIds(userIds) {
    const { data, error } = await this.supabase
      .from(this.tableName)
      .select('id, email, pseudo')
      .in('id', userIds);

    if (error) throw error;
    return data || [];
  }

  // DEBUG: Lister tous les tokens de v√©rification actifs
  async getAllVerificationTokens() {
    const { data, error } = await this.supabase
      .from(this.tableName)
      .select('id, email, pseudo, verification_token, is_verified')
      .not('verification_token', 'is', null);

    if (error) throw error;
    return data || [];
  }
}

module.exports = User;
